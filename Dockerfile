# 실행에 필요한 운영 체제 레이어, 도커 허브 상의 이미지 이름으로 넣는다.
FROM node

# 모든 후속 명령이 해당 디렉토리에서 실행된다.
WORKDIR /app

# 로컬 머신에 있는 파일이 이미지에 들어가야 하는지 알린다.
# 첫번째 . -> 컨테이너 외부(이미지 외부 경로) 이미지로 복사되어야 할 파일들이 있는 곳.
# . <- 도커파일이 있는 경로라고 알려준다. 이 때, 도커 파일은 제외된다.
# 이 프로젝트의 모든 폴더, 하위 폴더를 이미지화 한다고 알린다.

# 두 번째 /app -> 이미지 저장 경로
# . 이라고 하면 도커 컨테이너의 루트 엔트리이나, 사용자가 선택한 서브 폴더를 사용하는 것이 좋다. (이름 지정 가능) -> 존재하지 않으면 자동으로 만들어짐.

# 프로젝트 루트 디렉토리의 모든 폴더가 -> 컨테이너 내부의 /app 에 복사된다.
# ./ -> 도커 컨테이너의 현재 작업 디렉토리, 즉 /app 에 복사된다. 명시적으로 설정해도 된다.
# 현재 작업 디렉토리를 명확하게 하기 위해서는 명시적으로 설정해주는 것이 낫다.
COPY . /app

# 해당 명령은 '/app' 디렉토리 안에서 실행된다. 그러므로 WORKDIR 을 지정해줘야 함.
RUN npm install 

# 도커 마지막 명령 전에, 어떤 포트에 연결되어야 하는지 로컬 머신에게 지시한다.
EXPOSE 80

# server.js 파일을 실행하도록 지시함.
# 이미지를 실행시킬 때 실행되는 명령어가 아니라, 이미지를 기반으로 컨테이너가 시작될 때 실행되는 명령어. 띄어쓰기를 기준으로 배열로 줘야 함.
# CMD 에 특정하지 않으면 베이스 이미지가 실행되고, 에러가 발생한다.
CMD ["node", "server.js"]

# 이미지는 컨테이너의 템플릿 임을 명심하자.
# 이미지를 실행시키는 것이 아니라, 이미지를 기반으로 컨테이너를 실행시키는 것 !